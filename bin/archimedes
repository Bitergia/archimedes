# -*- coding: utf-8 -*-
#
# Import and Export Kibana dashboards
#
# Copyright (C) 2014-2018 Bitergia
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#
# Authors:
#   Valerio Cosentino <valcos@bitergia.com>
#

import argparse
import logging
from operator import xor
import sys

from archimedes.archimedes import Archimedes
from archimedes.clients.dashboard import INDEX_PATTERN
from archimedes._version import __version__

# Logging formats
ARCHIMEDES_LOG_FORMAT = "[%(asctime)s] - %(message)s"
ARCHIMEDES_DEBUG_LOG_FORMAT = "[%(asctime)s - %(name)s - %(levelname)s] - %(message)s"
ARCHIMEDES_USAGE_MSG = "usage: archimedes [options]"
ARCHIMEDES_DESC_MSG = "Import and export Kibana dashboards, visualizations, searches and index patterns"
ARCHIMEDES_VERSION_MSG = \
"""%(prog)s """  + __version__


def config_logging(debug):
    """Config logging level output output"""

    if debug:
        logging.basicConfig(level=logging.DEBUG, format=ARCHIMEDES_DEBUG_LOG_FORMAT)
        logging.debug("Debug mode activated")
    else:
        logging.basicConfig(level=logging.INFO, format=ARCHIMEDES_LOG_FORMAT)


def get_params_parser():
    """Parse command line arguments"""

    parser = argparse.ArgumentParser(usage=ARCHIMEDES_USAGE_MSG,
                                     description=ARCHIMEDES_DESC_MSG,
                                     add_help=False)

    parser.add_argument('-g', '--debug', dest='debug',
                        action='store_true',
                        help=argparse.SUPPRESS)
    parser.add_argument('-h', '--help', action='help',
                        help=argparse.SUPPRESS)
    parser.add_argument('-v', '--version', action='version',
                        version=ARCHIMEDES_VERSION_MSG,
                        help=argparse.SUPPRESS)

    parser.add_argument('url', help='Kibana URL')
    parser.add_argument('root_path', help='Archimedes folder where objects are stored')
    parser.add_argument('--obj-type', dest='obj_type', help='Type of the object to import/export')
    parser.add_argument('--obj-id', dest='obj_id', help='ID of the object to import/export')
    parser.add_argument('--obj-title', dest='obj_title', help='Title of the object to import/export')
    parser.add_argument('--force', dest='force', action='store_true', help='Force overwrite')

    group_import = parser.add_argument_group('Import')
    group_import.add_argument('--find', dest='find', action='store_true',
                              help='Find and load the objects referenced in the file')

    group_export = parser.add_argument_group('Export')
    group_export.add_argument('--index-pattern', dest='index_pattern', action='store_true',
                              help='Export the index pattern related to the target object')

    exclusive = parser.add_mutually_exclusive_group(required=True)
    exclusive.add_argument('--import', dest='import_objs', action='store_true',
                           help='Import Kibana objects from files')
    exclusive.add_argument('--export', dest='export_objs', action='store_true', help='Export Kibana objects to a file')

    if len(sys.argv) == 1:
        parser.print_help()
        sys.exit(1)

    return parser


def get_params():
    """Get params to execute Archimedes"""

    parser = get_params_parser()
    args = parser.parse_args()

    error = 0

    if not args.url:
        logging.error("Missing Kibana URL")
        error = 1

    if not args.root_path:
        logging.error("Missing root path")
        error = 1

    if args.import_objs and args.export_objs:
        logging.error("Archimedes requires --import or --export")
        error = 1

    if not args.obj_type:
        logging.error("Archimedes requires --obj-type")
        error = 1

    if not xor(bool(args.obj_id), bool(args.obj_title)):
        logging.error("Archimedes requires --obj-id or --obj-title")
        error = 1

    if args.export_objs:
        if args.obj_type == INDEX_PATTERN and args.index_pattern:
            logging.error("Export index-pattern param is not valid for index-pattern objects")
            error = 1

    if error:
        sys.exit(1)

    return args


def main():
    args = get_params()
    config_logging(args.debug)
    logging.info("Archimedes will start soon.")

    archimedes = Archimedes(args.url, args.root_path)

    if args.import_objs and args.obj_id:
        archimedes.import_from_disk(obj_type=args.obj_type, obj_id=args.obj_id,
                                    find=args.find, force=args.force)
    elif args.import_objs and args.obj_title:
        archimedes.import_from_disk(obj_type=args.obj_type, obj_title=args.obj_title,
                                    find=args.find, force=args.force)
    elif args.export_objs and args.obj_id:
        archimedes.export_to_disk(obj_type=args.obj_type, obj_id=args.obj_id,
                                  force=args.force, index_pattern=args.index_pattern)
    elif args.export_objs and args.obj_title:
        archimedes.export_to_disk(obj_type=args.obj_type, obj_title=args.obj_title,
                                  force=args.force, index_pattern=args.index_pattern)

    logging.info("Archimedes has finished.")


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        s = "\n\nReceived Ctrl-C or other break signal. Exiting.\n"
        sys.stderr.write(s)
        sys.exit(0)
